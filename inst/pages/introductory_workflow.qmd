## Introductory

**Version:** 2.1

```{r}
#| label: setup
#| echo: FALSE
#| results: "asis"
library(rebook)
chapterPreamble()
```

::: {#translate}
<a href="introductory_workflow_french_version.qmd"><img src="figures/flags/France_flag.png" alt="French flag" class="flag"/> **French** </a> <a href="introductory_workflow_dutch_version.qmd"><img src="figures/flags/Netherland_flag.jpg" alt="Netherland flag" class="flag"/> **Dutch** </a>
:::

<img src="figures/intro_workflow_logo.svg" alt="logo workflow" id="banner"/>

## Introduction

Hello and welcome to a comprehensive workflow using the latest R/Bioconductor tools
for microbiome data science. In this tutorial, weâ€™ll guide you through the
foundational steps of microbiome analysis using _miaverse_. These steps are
applicable to almost any of your projects and will help you understand the
fundamental concepts that will skyrocket ðŸš€ your future microbiome analyses.

In this workflow, we cover basics of:

    - Data wrangling and transformations
    - Exploration
    - Alpha and beta diversity

## Load packages

To begin, we need to load the necessary packages. The following script ensures
that all required packages are loaded and installed if they arenâ€™t already.

```{r}
#| label: install
#| output: FALSE
# List of packages that we need
packages <- c("mia",  "miaViz", "scater")

# Get packages that are already installed
packages_already_installed <- packages[ packages %in% installed.packages() ]

# Get packages that need to be installed
packages_need_to_install <- setdiff( packages, packages_already_installed )

# Loads BiocManager into the session. Install it if it is not already installed.
if( !require("BiocManager") ){
    install.packages("BiocManager")
    library("BiocManager")
}

# If there are packages that need to be installed, installs them with BiocManager
# Updates old packages.
if( length(packages_need_to_install) > 0 ) {
   install(packages_need_to_install, ask = FALSE)
}

# Load all packages into session. Stop if there are packages that were not
# successfully loaded
pkgs_not_loaded <- !sapply(packages, require, character.only = TRUE)
pkgs_not_loaded <- names(pkgs_not_loaded)[ pkgs_not_loaded ]
if( length(pkgs_not_loaded) > 0 ){
    stop(
        "Error in loading the following packages into the session: '",
        paste0(pkgs_not_loaded, collapse = "', '"), "'")
}
```

## Importing data

The next step involves importing your data into the R environment.
Depending on the bioinformatics tools used in the upstream section of the
workflow, importing the data may vary slightly. We cover the most widely used
formats, with importers available for convenience. You can also build a
`TreeSummarizedExperiment` (`TreeSE`) from scratch from basic text files. For more
information, see @sec-loading-experimental-microbiome-data.

For this demonstration, you can either use your own data or one of the
built-in datasets provided by mia, which you can find here: @sec-example-data.

In this tutorial, we'll be using the @Tengeler2020 dataset. In the study,
they explored the impact of altered microbiomes on brain
structure, specifically comparing patients with ADHD
(Attention Deficit Hyperactivity Disorder) to controls (see more information
on this dataset from
[here](https://microbiome.github.io/outreach/tengeler2020_presentation.html#/title-slide)).
Let's load this dataset into our R environment:

```{r}
#| label: loadDataset
data("Tengeler2020", package = "mia")
tse <- Tengeler2020
```

## Subsetting and accessing the data

Once loaded, we often need to wrangle and preprocess the data. The `TreeSE`
object, a primary data container in the _miaverse_ framework, is designed to
handle complex microbiome data effectively. For more details about the `TreeSE`
and other data containers, see [@sec-containers].

### Subsetting

In many cases, you may need to work with only a portion of your original
`TreeSE` for various reasons. Subsetting the `TreeSE` object is as
straightforward as manipulating a basic matrix in R, utilizing rows and columns.
For example, using the Tengeler2020 dataset, we can focus on a specific cohort.
Here's how:

```{r}
#| label: subsetBySample
dim(tse)
# Subset based on sample metadata
tse <- tse[ , tse$cohort == "Cohort_2" ]
dim(tse)
```

This will create a `TreeSE` object only containing
samples of the second cohort. You can find more information on subsetting from
here [@sec-rows-and-cols].

### Accessing data

You can also access different types of data stored within the `TreeSE` object.
Here's a quick reminder on how to access certain types of data:

You can access the abundance table, or assays, as follows. In this example,
we specify that we want to fetch an abundance table named "counts". For more
details, see [@sec-assay-slot].

```{r}
#| label: showAssay
assay(tse, "counts") |> head()
```

Sample (or column) metadata is stored in `colData`. In this example, it includes
the diagnoses of the patients from whom the samples were drawn. See for more
info on `colData` from [@sec-add-or-modify-data].

```{r}
#| label: showColdata

colData(tse)
```

`rowData` contains data on feature characteristics,
particularly taxonomic information (see [@sec-rowData]).

```{r}
#| warning: FALSE
#| label: showRowdata
rd <- rowData(tse)
rd
```

Here `rowData(tse)` returns a DataFrame with 151 rows and 7 columns. Each
row represents an organism and each column a taxonomic level.

## Data wrangling

### Agglomerating data

Agglomerating your data to a specific taxonomic rank helps simplify the
analysis and reveal broader patterns. By grouping taxa at a chosen level,
such as Phylum, you can better understand general trends and distributions.
The `agglomerateByRank()` function streamlines this process, making it easier
to analyze and visualize data at a higher level of aggregation.

```{r}
#| label: agglomerating-data
tse_phylum <- agglomerateByRank(tse, rank = "Phylum")

# Check
tse_phylum
```

Great! Now, our data is aggregated to the taxonomic information up to the Phylum
level, allowing the analysis to be focused on this specific rank.

### Transformation

The [`mia` package](https://microbiome.github.io/mia/)
provides an easy way to calculate the relative abundances for our `TreeSE`
using the `transformAssay()` method.

```{r}
#| label: calculateRelabundance
tse <- transformAssay(tse, method = "relabundance")
tse_phylum <- transformAssay(tse_phylum, method = "relabundance")
```

This function takes the original counts assay and calculates the relative
abundances, storing the newly computed matrix back into the `TreeSE`. You can
access it in the assays of the `TreeSE` by specifying the name of the relative
abundance assay (e.g., "relabundance"):

```{r}
#| label: showRelabundance
assay(tse, "relabundance") |> head()
```

For more information on the capabilities and transformation options of 
`mia::transformAssay()`, see [@sec-assay-transform].

## Community composition

A common way to summarize composition is to use a bar plot to display relative
abundances. See [@sec-microbiome-community] for more details on composition
summaries. This approach visualizes the relative abundances of selected taxa
in each sample, providing a quick overview of common compositions and major
changes across samples. Here, we choose to plot all the phyla found in the
samples.

```{r}
#| label: composition_plot

p <- plotAbundance(tse_phylum, assay.type = "relabundance")
p
```

As we can see, _Bacteroidetes_ is a common phylum in all samples. When its
abundance drops below 50%, _Firmicutes_ notably increases to fill the space.

## Community diversity

Community diversity measures in microbiology can be categorized into three groups:

    - Richness: The total number of taxa.
    - Equitability: How evenly the abundances of taxa are distributed.
    - Diversity: A combination of taxa richness and equitability.

Diversity can vary in association with different phenotypes.
Next, we will calculate Faith's phylogenetic diversity index. What sets this index
apart is its incorporation of phylogeny into the diversity calculation. This
index considers both the number and the relatedness of different taxa, using
branch lengths on a phylogenetic tree. For
more information on diversity, see [@sec-alpha-diversity].

```{r}
#| label: calculateRichness

# Estimate Faith's index
tse <- addAlpha(tse, index = "faith")
```

The results are stored to `colData`. The calculated index shows how diverse
each sample is in terms of the number of different microbes present. We can
then create a graph to visualize this.

```{r}
#| label: plotColdata
p <- plotColData(tse, x = "patient_status", y = "faith")
p
```

The graph shows that there is no significant difference in microbial diversity
between the ADHD and control groups. However, alpha diversity metrics like
Faith's index only tell us about the diversity within individual samples
and do not account for the differences between samples or groups. To
understand how microbial communities vary between different samples â€” for
instance, between ADHD patients and controls â€” we need to examine beta diversity.

## Community dissimilarity

To gain a more comprehensive understanding of microbial variation across
different samples, we assess beta diversity by measuring the dissimilarities
in microbial compositions between samples. Beta diversity helps us determine
how distinct or similar the microbiomes are among groups, allowing us to
identify patterns or differences in microbial communities that may not be
apparent from alpha diversity alone.

To explore these dissimilarities, we use Principal Coordinate Analysis (PCoA),
a technique that reduces the complexity of high-dimensional data by projecting
it into a lower-dimensional space while preserving the dissimilarities
(or distances) between samples. This enables us to visualize the relationships
and differences between samples in a simplified manner. For more information,
refer to [@sec-community-similarity].

In this analysis, we use UniFrac dissimilarity, which takes into account
the phylogenetic relationships among taxa. UniFrac measures the phylogenetic
distance between microbial communities by comparing the branch lengths shared
by the communities on a phylogenetic tree. This provides a more nuanced
understanding of community differences by incorporating evolutionary
relationships.

```{r}
#| label: calculateBrayCurtis
#| output: false

# Run PCoA
tse <- runMDS(
    tse,
    FUN = getDissimilarity,
    tree = rowTree(tse),
    method = "unifrac",
    assay.type = "counts",
    niter = 100
    )
```

The results are stored in `reducedDim` slot. In order to visualize this newly
generated projection, we can apply `scater::plotReducedDim()`.

```{r}
#| label: showPCoA
# Create a ggplot object
p <- plotReducedDim(
    tse, "MDS",
    colour_by = "patient_status",
    point_size = 3
    )
p <- p + labs(title = "Principal Coordinate Analysis")
p
```

The plot shows that the data clusters into three groups, with two of them
consisting solely of one diagnosis or another. This suggests that the microbial
profiles differ between ADHD patients and controls.

To further explore the factors driving these differences in microbial profiles,
we can perform a differential abundance analysis, for instance
(see [@sec-differential-abundance]).
