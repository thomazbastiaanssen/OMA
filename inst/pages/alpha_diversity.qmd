# Community diversity {#sec-community-diversity}

```{r setup, echo=FALSE, results="asis"}
library(rebook)
chapterPreamble()
```

Alpha diversity, diversity within a sample, is a central concept in microbiome 
research. In ecological literature, several distinct but related alpha diversity
indices, often referring to richness, evenness and diversity, are commonly used 
[@Whittaker1960], [@Willis2019]. The term _alpha diversity_ is often used to 
collectively refer to all these indices.


The majority of alpha diversity indices are closely related, though this is not 
evident from their names. It is helpful to understand an alpha diversity metric 
through two factors. First, alpha diversity measures can be defined as special 
cases of a unifying equation where the _Hill coefficient_ determines whether the
equation captures richness, inverse Simpson, Shannon diversity or generalized 
diversity. Secondly, alpha diversity indices vary in whether they are weighed by
phylogeny [@Faith1992]. The figure below further illustrates this classification 
using several popular alpha diversity metrics, adapted with permission [@bastiaanssen2023bugs1]. 

![Alpha Diversity metrics are numerically related and can be classified along two axes. Here, we show Hill coefficient on the x-axis and whether the index considers phylogeny on the y-axis](alpha_diversity_files/figure-html/alpha_div_fig.png) 



::: {.callout-note}
## Note: Richness estimators and denoising

Several estimators have been developed to address the confounding effect of 
limited sampling size on observed richness, most notably ACE [@Chao1992] and 
Chao1 [@Chao1984]. Notably, these approaches may yield misleading results for 
modern 16S data, which commonly features denoising and removal of singletons 
[@Deng2024]. 
:::

## Alpha diversity estimation in practice

### Calculate diversity measures {#sec-estimate-diversity}


Alpha diversity can be estimated with the `addAlpha()` function, which interacts
with other packages implementing the calculation, such as `vegan` [@R_vegan].  
These functions calculate the given indices, and add them to the
`colData` slot of the `SummarizedExperiment` object with the given
`name`.

The estimated values can then be retrieved and analyzed directly from
the `colData`, for example, by plotting them using `plotColData()` from
the `scater` package [@R_scater]. Here, we use the `observed`
species as a measure of richness.

Certain indices have additional options, here observed has `detection` parameter
that control the detection threshold. Species over this threshold is considered
as detected. See full list of options from from `help(addAlpha)`.

```{r plot-richness, message=FALSE, cache=TRUE}
#| context: setup

# First, let's load some example data.
library(mia)
data("GlobalPatterns", package="mia")
tse <- GlobalPatterns

# Estimate (observed) richness
tse <- addAlpha(
    tse, assay.type = "counts", index = "observed", name = "observed",
    detection = 10)

# Check some of the first values in colData
tse$observed |> head()
```

::: {.callout-tip}
## Tip

You can calculate multiple indices simultaneously by specifying multiple indices
in the `index` parameter.

For example:  `index = c("observed", "shannon")`
:::

Let's visualize the results against selected `colData` variables (sample
type and final barcode).

```{r plot-div-obs, message=FALSE, fig.cap="Shannon diversity estimates plotted grouped by sample type with colour-labeled barcode.", cache=TRUE}
library(scater)
plotColData(
    tse,
    "observed",
    "SampleType",
    colour_by = "Final_Barcode") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(x = "Sample types", y = expression(Richness[Observed]))
```

We can then analyze the statistical significance. We use the non-parametric
Wilcoxon or Mann-Whitney test, as it is more flexible than the commonly used
Student's t-Test, since it does not assume normality.

```{r}
#| label: test_alpha1

pairwise.wilcox.test(
    tse[["observed"]], tse[["SampleType"]], p.adjust.method = "fdr")
```

### Faith phylogenetic diversity {#sec-faith-diversity}

The Faith index is returned by the function `addAlpha()`. It utilizes the widely
used function in _`picante`_ [@R_picante, @Kembel2010]. The method uses the 
default rowTree from the `TreeSummarizedExperiment` object (`tse`).

```{r phylo-div-1}
tse <- addAlpha(tse, assay.type = "counts", index = "faith")
tse$faith |> head()
```

::: {.callout-note}
## Note: Requires phylogenetic tree

Because `tse` is a `TreeSummarizedExperiment` object, its phylogenetic tree is
used by default. However, the optional argument `tree` must be provided if
`tse` does not contain one.
:::

## Alpha diversity measure comparisons {#sec-compare-alpha}

We can compare alpha diversities for example by calculating correlation between
them. Below, a visual comparison between shannon and faith indices is shown
with a scatter plot.

```{r compare-diversities, fig.width = 6.5}
tse <- addAlpha(tse, assay.type = "counts", index = "shannon")

plotColData(tse, x = "shannon", y = "faith") +
    labs(x="Shannon index", y="Faith (phylogenetic) index") +
    geom_smooth(method = "lm")
```

```{r}
#| label: compare_indices

cor.test(tse[["shannon"]], tse[["faith"]])
```

Let us visualize results from multiple alpha diversity measures
against a given sample grouping available in `colData` (here,
sample type). These have been readily stored in the `colData` slot,
and they are thus directly available for plotting.

```{r plot-all-diversities, fig.width = 6.5}
library(patchwork)

# Create the plots
plots <- lapply(
    c("observed", "shannon", "faith"),
    plotColData,
    object = tse,
    x = "SampleType",
    colour_by = "SampleType")

# Fine-tune visual appearance
plots <- lapply(
    plots, "+",
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          axis.ticks.x = element_blank()))

# Plot the figures
wrap_plots(plots, ncol = 1) +
  plot_layout(guides = "collect")
```

## Visualizing significance in group-wise comparisons

Next, let's compare the Shannon index between sample groups and visualize the
statistical significance. Using the `stat_compare_means` function from the
`ggpubr` package, we can add visually appealing p-values to our plots.

To add adjusted p-values, we have to first calculate them.

```{r visualize-shannon}
library(ggpubr)
library(tidyverse)


index <- "shannon"
group_var <- "SampleType"

# Subsets the data. Takes only those samples that are from feces, skin, or
# tongue.
tse_sub <- tse[ , tse[[group_var]] %in% c("Feces", "Skin", "Tongue") ]

# Changes old levels with new levels
tse_sub$SampleType <- factor(tse_sub$SampleType)

# Calculate p values
pvals <- pairwise.wilcox.test(
    tse_sub[[index]], tse_sub[[group_var]], p.adjust.method = "fdr")
# Put them to data.frame format
pvals <- pvals[["p.value"]] |>
    as.data.frame()
varname <- "group1"
pvals[[varname]] <- rownames(pvals)
# To long format
pvals <- reshape(
    pvals,
    direction = "long",
    varying = colnames(pvals)[ !colnames(pvals) %in% varname ],
    times = colnames(pvals)[ !colnames(pvals) %in% varname ],
    v.names = "p",
    timevar = "group2",
    idvar = "group1"
    ) |>
    na.omit()
# Add y-axis position
pvals[["y.position"]] <- apply(pvals, 1, function(x){
    temp1 <- tse[[index]][ tse[[group_var]] == x[["group1"]] ]
    temp2 <- tse[[index]][ tse[[group_var]] == x[["group2"]] ]
    temp <- max( c(temp1, temp2) )
    return(temp)
})
pvals[["y.position"]] <- max(pvals[["y.position"]]) +
    order(pvals[["y.position"]]) * 0.2
# Round values
pvals[["p"]] <- round(pvals[["p"]], 3)

# Create a boxplot
p <- plotColData(
    tse_sub, x = group_var, y = index,
    show_boxplot = TRUE, show_violin = FALSE) +
    theme(text = element_text(size = 10)) +
    stat_pvalue_manual(pvals)
p
```

Article on
[`ggpubr` package](http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/76-add-p-values-and-significance-levels-to-ggplots/)
provides further examples for estimating and highlighting significances.
